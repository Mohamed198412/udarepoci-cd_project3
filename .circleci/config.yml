version: 2.1



commands:

  


  # install_ansible:
  #   description: Install ansible v2
  #   steps:
  #     - run:
  #         name: Install ansible
  #         command: |
  #           sudo apt update
  #           sudo apt install software-properties-common -y
  #           sudo add-apt-repository --yes --update ppa:ansible/ansible
  #           sudo apt install ansible -y
  install_awscli:
    description: Install aws cli v2
    steps:
      - run:
          name: Install aws cli v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install  
            
  dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

  install_nodejs:
    description: Install ansible v2
    steps:
      - run:         
          name: "install nodejs 14.20.1"
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -   
            sudo apt install -y nodejs
# commands:

  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
    
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi

        
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - build-frontend
      - run:
          name: "build the front-end"
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: build-frontend
          paths:
            - frontend/node_modules 
  # build-frontend:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-dependenci]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-dependenci

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependenci]
      - run:
          name: Back-end build
          command: |
             cd backend
             sudo npm install
             sudo npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependenci

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependenci]
      - run:
          name: frontend unit test
          command: |
             cd backend
             npm install
             npm test

              
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependenci]
      - run:
          name: Back-end unit test
          command: |
             cd backend
             npm install
             npm test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependenci
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependenci]
      - run:
          name: frontend scan 
          command: |
             cd backend
             npm install
             npm audit fix
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependenci]
      - run:
          name: Back-end scan
          command: |
             cd backend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - dependencies
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation describe-stacks \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Stacks[0].Outputs[0].OutputValue" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - destroy_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  
      # Here's where you will add some code to rollback on failure  
      # Here's where you will add some code to rollback on failure     
      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "production"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7d:21:d4:90:fd:db:3c:73:6e:59:3c:af:be:d9:22:c1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # - destroy_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      
      
           
 #     Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: send migration to kvdb
          command: |           
            if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
            then
              curl https://kvdb.io/LJMYvNDnWLwhaduVDPmzQc/migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "1"
            else
              curl https://kvdb.io/LJMYvNDnWLwhaduVDPmzQc/migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "0"
            fi
      # - destroy_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations  

  deploy-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-frontend
      - dependencies
      - run:
          name: Get backend url
          command: |
             BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
             API_URL="http://${BACKEND_IP}:3030"
             echo "API_URL=${API_URL}" >> frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # - destroy_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations        

  # deploy-frontend:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - restore_cache:
  #         keys: [frontend-deps]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           cd frontend
  #           npm install
  #     - run:
  #         name: get backend url
  #         command: |
  #           BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
  #            API_URL="http://${BACKEND_IP}:3030"
  #            echo "API_URL=${API_URL}" >> frontend/.env
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           npm i
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive

      # Here's where you will add some code to rollback on failure    
  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #       environment:
  #         NODE_ENV: "production"
  #         VERSION: "1"
  #         ENVIRONMENT: "production"
  #         TYPEORM_CONNECTION: $TYPEORM_CONNECTION
  #         TYPEORM_HOST: $TYPEORM_HOST
  #         TYPEORM_USERNAME: $TYPEORM_USERNAME
  #         TYPEORM_PASSWORD: $TYPEORM_PASSWORD
  #         TYPEORM_DATABASE: $TYPEORM_DATABASE
  #         TYPEORM_PORT: $TYPEORM_PORT
  #         TYPEORM_ENTITIES: $TYPEORM_ENTITIES       
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["7d:21:d4:90:fd:db:3c:73:6e:59:3c:af:be:d9:22:c1"]
  #     - attach_workspace: 
  #         at: ~/
  #     - restore_cache:
  #         keys:
  #           - build-backend
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible nodejs npm tar gzip
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           cat ~/project/.circleci/ansible/inventory.txt
  #           ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      
  deploy-backend:  
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip
            pip install awscli
            
      - add_ssh_keys:
          fingerprints: [ "7d:21:d4:90:fd:db:3c:73:6e:59:3c:af:be:d9:22:c1" ]
      - run:
          name: Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            cd ~/project/backend
            npm i
            npm install typescript@latest -g
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy/files
            ls
            cat ~/project/.circleci/ansible/inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # - destroy_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations  
     
  smoke-test-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test
          command: |
             export BACKEND_IP=$(aws ec2 describe-instances \
             --query 'Reservations[*].Instances[*].PublicDnsName' \
             --filters "Name=tag:Name,Values= backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --output text)
             export API_URL="http://${BACKEND_IP}:3030"
             echo "${API_URL}"
             if curl "${API_URL}/api/status" | grep "ok"
             then
                 return 0
             else
                 return 1
             fi
             curl "${API_URL}/api/status"
      # - destroy_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations

  smoke-test-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Smoke test for front end
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com"             
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome" 
            then
              exit 0
            else
              exit 1
            fi
      # - destroy_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations  
      
  cloudfront-update:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - dependencies
      - run:
          name: get old workflow for clean
          command: |
            OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            curl https://kvdb.io/LJMYvNDnWLwhaduVDPmzQc/old_workflow_id \
            -H "X-Api-Key: ${THISDB_API_KEY}" \
            -d "$OldWorkflowID"  
      - run:
          name: Updating cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
  # cloudfront-update:
  #   docker:
  #      - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - dependencies
  #     - install_nodejs
  #     - run:
  #         name: Save Old WorkflowID to kvdb.io
  #         command: |
  #           export OLD_WORKFLOW_ID=$(aws cloudformation \
  #           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #           --no-paginate --output text)
  #           echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
  #           curl https://kvdb.io/LJMYvNDnWLwhaduVDPmzQc/old_workflow_id -d "${OLD_WORKFLOW_ID}"  
  #     - run:  
  #         name: Updating cloudfront distribution  
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name InitialStack \
  #           --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --tags project=udapeople
           
      # - destroy_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations      
  
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - dependencies
      - install_nodejs
      - run:
          name: Remove old stacks and their files
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            # Fetch the Old workflow ID
            export OldWorkflowID=$(curl --insecure https://kvdb.io/LJMYvNDnWLwhaduVDPmzQc/old_workflow_id)
            echo OldWorkflowID: ${OldWorkflowID}
            
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
        
      # - run:
      #     name: Updating cloudfront distribution
      #     command: |
      #       aws cloudformation deploy \
      #       --template-file .circleci/files/cloudfront.yml \
      #       --stack-name InitialStack \
      #       --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
      #       --tags project=udapeople
    # docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Deploy the backend infrastructure using cloudformation
  #         command: |
  #           OLD_WORKFLOW_ID=$(aws cloudformation \
  #             list-exports --query "Exports[?Name==\`UdapeopleWorkflowID\`].Value" \
  #             --no-paginate --output text)

  #           echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."

  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

  #           printf '%s\n' "${STACKS[@]}"

  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --stack-name udapeople-prod-cloudfront

  #           if printf '%s\n' "${STACKS[@]}" | grep -q "$OLD_WORKFLOW_ID"; then
  #             echo "Removing previous stack"
  #             aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
  #           fi
   
  # cloudfront-update:
  #   docker:
  #     - image: cimg/base:2021.04
  #   steps:
  #     - checkout
  #     - dependencies
  #     - run:
  #         name: get old workflow for clean
  #         command: |
  #           export OLD_WORKFLOW_ID=$(aws cloudformation \
  #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #             --no-paginate --output text)

  #           echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."

  #           curl https://kvdb.io/LJMYvNDnWLwhaduVDPmzQc//migration_${CIRCLE_WORKFLOW_ID:0:7} \
  #           -H "X-Api-Key: ${THISDB_API_KEY}" \
  #           -d "$OLD_WORKFLOW_ID"  
  #     - run:
  #         name: Updating cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name InitialStack \
  #           --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --tags project=udapeople  

  #           newWorkflowID=$(aws cloudformation \
  #           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #           --no-paginate --output text)
  #           echo "new_WORKFLOW_ID: $newWorkflowID."
  # cloudfront-update:
  #   docker:
  #     - image: cimg/base:2021.04
  #   steps:
  #     - checkout
  #     - dependencies
  #     - run:
  #         name: get old workflow for clean
  #         command: |
  #           OldWorkflowID=$(aws cloudformation \
  #           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #           --no-paginate --output text)
  #           curl https://kvdb.io/LJMYvNDnWLwhaduVDPmzQc//migration_${CIRCLE_WORKFLOW_ID:0:7} \
  #           -H "X-Api-Key: ${THISDB_API_KEY}" \
  #           -d "$OldWorkflowID"  
      #  
      # - destroy_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

      # - revert-migrations          
    # docker:
    #   - image: python:3.7-alpine3.11
    #     environment:
    #       NODE_ENV: "production"
    #       VERSION: "1"
    #       ENVIRONMENT: "production"
    #       TYPEORM_CONNECTION: $TYPEORM_CONNECTION
    #       TYPEORM_HOST: $TYPEORM_HOST
    #       TYPEORM_USERNAME: $TYPEORM_USERNAME
    #       TYPEORM_PASSWORD: $TYPEORM_PASSWORD
    #       TYPEORM_DATABASE: $TYPEORM_DATABASE
    #       TYPEORM_PORT: $TYPEORM_PORT
    #       TYPEORM_ENTITIES: $TYPEORM_ENTITIES       
    # steps:
    #   - checkout
    #   - add_ssh_keys:
    #       fingerprints: ["7d:21:d4:90:fd:db:3c:73:6e:59:3c:af:be:d9:22:c1"]
    #   - attach_workspace: 
    #       at: ~/
    #   - restore_cache:
    #       keys:
    #         - build-backend
    #   - run:
    #       name: Install dependencies
    #       command: |
    #         apk add --update ansible nodejs npm tar gzip
    #   - run:
    #       name: Deploy backend
    #       command: |
    #         cd backend
    #         npm install
    #         npm run build
    #         cd ..
    #         tar -C backend -czvf artifact.tar.gz .
    #         cat ~/project/.circleci/ansible/inventory.txt
    #         ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml

      # - destroy_environment
      # - revert-migrations
                  
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test-backend:
      #       requires: [deploy-backend]
      # - smoke-test-frontend:
      #     requires: [deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test-backend,smoke-test-frontend]       
      - cleanup
          # requires: [cloudfront-update]